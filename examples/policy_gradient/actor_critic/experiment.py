from algo import Algorithm

from lagom.experiment import Config
from lagom.experiment import BaseExperimentWorker
from lagom.experiment import BaseExperimentMaster


class ExperimentWorker(BaseExperimentWorker):
    def make_algo(self):
        algo = Algorithm(name='Actor-Critic/Vanilla Policy Gradient')
        
        return algo


class ExperimentMaster(BaseExperimentMaster):
    def process_algo_result(self, config, result):
        assert result is None
        
    def make_configs(self):
        config = Config()
        
        # General configurations
        config.add_item(name='cuda', val=True)
        config.add_item(name='cuda_id', val=1)
        # Random seeds
        # Generated by: np.random.randint(0, np.iinfo(np.int32).max, 10)
        config.add_grid(name='seed', val=[1284204222, 1079618558, 310837894, 
                                          1130644153, 2099771862, 1234806135,
                                          92464293, 146053987, 1140885110,
                                          988661500])
        
        # Algorithm configuration
        config.add_item(name='algo:lr', val=1e-3)
        config.add_item(name='algo:gamma', val=0.99)
        config.add_item(name='algo:use_lr_scheduler', val=True)
        
        config.add_item(name='env:id', val='CartPole-v1')
        
        # Engine configuration
        config.add_item(name='train:iter', val=4000)
        config.add_item(name='train:N', val=1)
        config.add_item(name='train:T', val=500)
        
        config.add_item(name='eval:N', val=10)
        config.add_item(name='eval:T', val=500)
        
        # Agent configuration
        config.add_grid(name='agent:standardize', val=[True, False])
        config.add_item(name='agent:max_grad_norm', val=0.5)  # gradient clipping with max gradient norm
        config.add_item(name='agent:value_coef', val=0.5)  # Coefficient for learning value function
        config.add_item(name='agent:entropy_coef', val=0.01)  # Coefficient for maximize policy entropy
        
        # Logging configurations
        config.add_item(name='log:interval', val=100)
        config.add_item(name='log:dir', val='logs')
        
        
        configs = config.make_configs()
        
        return configs
